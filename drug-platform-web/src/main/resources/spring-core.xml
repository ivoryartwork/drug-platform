<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.0.xsd http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd">

    <context:property-placeholder location="classpath:config/*.properties"/>
    <context:component-scan base-package="com.drug.platform.service"/>
    <context:spring-configured/>

    <!--数据库配置-->
    <bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close">
        <property name="driverClassName" value="${jdbc.driverClassName}"/>
        <property name="url" value="${jdbc.url}"/>
        <property name="username" value="${jdbc.username}"/>
        <property name="password" value="${jdbc.password}"/>
        <!-- 设置连接池初始值 -->
        <property name="initialSize" value="${jdbc.initialSize}"/>
        <!-- 设置连接池连接数量最大值 -->
        <property name="maxActive" value="${jdbc.maxActive}"/>
        <!-- 设置连接池最小空闲连接数量 -->
        <property name="minIdle" value="${jdbc.minIdle}"/>
        <!-- 设置连接池最大空闲连接数量 -->
        <property name="maxIdle" value="${jdbc.maxIdle}"/>
        <!--设置连接等待时间-->
        <property name="maxWait" value="${jdbc.maxWait}"/>
        <!--获得连接时是否验证连接有效-->
        <property name="testOnBorrow" value="${jdbc.testOnBorrow}"/>
        <!--返回连接时是否验证连接有效-->
        <property name="testOnReturn" value="${jdbc.testOnReturn}"/>
        <!--连接空闲时是否验证连接有效-->
        <property name="testWhileIdle" value="${jdbc.testWhileIdle}"/>
        <!--验证连接有效的sql语句-->
        <property name="validationQuery" value="${jdbc.validationQuery}"/>
        <!--检查连接是否失效的时间间隔-->
        <property name="timeBetweenEvictionRunsMillis" value="${jdbc.timeBetweenEvictionRunsMillis}"/>
        <!--判断连接是否为空闲的连接最大空闲时间-->
        <property name="minEvictableIdleTimeMillis" value="${jdbc.minEvictableIdleTimeMillis}"/>
    </bean>

    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="dataSource"></property>
        <property name="configLocation" value="classpath:mybatis-config.xml"></property>
        <property name="mapperLocations" value="classpath:mapper/*.xml"></property>
    </bean>
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value="com.drug.platform.dao"></property>
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"></property>
    </bean>

    <bean id="txManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource"/>
    </bean>
    <tx:advice id="txAdvice" transaction-manager="txManager">
        <tx:attributes>
            <tx:method name="add*" propagation="REQUIRED"/>
            <tx:method name="insert" propagation="REQUIRED"/>
            <tx:method name="save*" propagation="REQUIRED"/>
            <tx:method name="update*" propagation="REQUIRED"/>
            <tx:method name="merge*" propagation="REQUIRED"/>
            <tx:method name="set*" propagation="REQUIRED"/>
            <tx:method name="delete*" propagation="REQUIRED"/>
            <tx:method name="modify*" propagation="REQUIRED"/>
            <tx:method name="upload*" propagation="REQUIRED"/>
            <tx:method name="next*" propagation="REQUIRED"/>
            <tx:method name="find*" read-only="true"/>
            <tx:method name="query*" read-only="true"/>
            <tx:method name="get*" read-only="true"/>
            <tx:method name="load*" read-only="true"/>
            <tx:method name="list*" read-only="true"/>
            <tx:method name="is*" read-only="true"/>
        </tx:attributes>
    </tx:advice>
    <aop:config expose-proxy="true">
        <aop:pointcut id="txPointcut" expression="execution(public * com.drug.platform.service..*.*(..))"/>
        <aop:advisor advice-ref="txAdvice" pointcut-ref="txPointcut"/>
    </aop:config>

    <!--定时任务-->
    <!-- 启动触发器的配置开始 -->
    <bean lazy-init="false" autowire="no"
          class="org.springframework.scheduling.quartz.SchedulerFactoryBean">
        <property name="triggers">
            <list>
                <ref bean="statisticsJobTrigger"/>
            </list>
        </property>
    </bean>
    <!-- 启动触发器的配置结束 -->

    <!-- quartz-2.x的配置 -->
    <bean id="statisticsJobTrigger"
          class="org.springframework.scheduling.quartz.CronTriggerFactoryBean">
        <property name="jobDetail">
            <ref bean="statisticsJobDetail"/>
        </property>
        <property name="cronExpression">
            <!--每天20点开始执行统计任务  -->
            <value>0 0 20 * * ?</value>
            <!--<value>*/5 * * * * ?</value>-->
        </property>
    </bean>
    <!-- 调度的配置结束 -->
    <!-- 统计job的配置开始 -->
    <bean id="statisticsJobDetail"
          class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">
        <property name="targetObject">
            <ref bean="statisticsJob"/>
        </property>
        <property name="targetMethod">
            <value>work</value>
        </property>
    </bean>
    <!-- 统计job的配置开始 -->

    <!-- 工作的bean -->
    <bean id="statisticsJob" class="com.drug.platform.job.StatisticsJob">
        <property name="tasks">
            <list>
                <!--药费比统计任务-->
                <ref bean="drugsThanTask"/>
            </list>
        </property>
    </bean>
    <bean id="drugsThanTask" class="com.drug.platform.job.DrugsThanTask"></bean>
</beans>